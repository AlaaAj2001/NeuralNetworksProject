/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ai_project2;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import static java.lang.Math.exp;
import static java.lang.Math.pow;

/**
 *
 * @author lenovo
 */

public class AI_Project2 extends javax.swing.JFrame {

    
    /**
     * Creates new form AI_Project2
     */
    public AI_Project2() {
        initComponents();
    }

    
    int Ya = 0;
    double T1, T2, T3, T4 = 0;
    double W1, W2, th, W13, W23, th3, W14, W24, th4, Y, Y3, Y4, Y5 , DY , DY3, DY4, DY5; 
   
    double LearningRateValue = 0;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        Gates = new javax.swing.JComboBox<>();
        jSlider1 = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        out3 = new javax.swing.JTextField();
        i31 = new javax.swing.JTextField();
        i30 = new javax.swing.JTextField();
        i20 = new javax.swing.JTextField();
        i21 = new javax.swing.JTextField();
        out2 = new javax.swing.JTextField();
        out1 = new javax.swing.JTextField();
        i11 = new javax.swing.JTextField();
        i10 = new javax.swing.JTextField();
        i00 = new javax.swing.JTextField();
        i01 = new javax.swing.JTextField();
        out0 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        L2 = new javax.swing.JLabel();
        L1 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        Classify = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        maxepoch = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        Function = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        x1 = new javax.swing.JTextField();
        x2 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        Test = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 204, 204));

        jLabel1.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Choose The Gate ");

        Gates.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        Gates.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "AND Gate", "NAND Gate", "OR Gate", "NOR Gate", "XOR Gate", "XNOR Gate" }));
        Gates.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GatesActionPerformed(evt);
            }
        });

        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Truth Table");

        jLabel3.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("0.0");

        jLabel9.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Learning Rate");

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        out3.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        out3.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        i31.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        i31.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        i30.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        i30.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        i20.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        i20.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        i21.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        i21.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        out2.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        out2.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        out1.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        out1.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        i11.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        i11.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        i10.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        i10.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        i00.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        i00.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        i01.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        i01.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        out0.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        out0.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel10.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Yd");
        jLabel10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        L2.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        L2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        L2.setText("X2");
        L2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        L1.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        L1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        L1.setText("X1");
        L1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel13.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("Inputs");
        jLabel13.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel14.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Output");
        jLabel14.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 243, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(31, 31, 31)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(i30, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(i31, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(out3, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(i20, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(i21, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(out2, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(i10, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(i11, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(out1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(L1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(i00, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(i01, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(L2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(out0, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap(31, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 215, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(16, 16, 16)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(11, 11, 11)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(L1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(L2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(i00, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(i01, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(out0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(i10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(i11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(out1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(i20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(i21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(out2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(i30, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(i31, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(out3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(16, Short.MAX_VALUE)))
        );

        Classify.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        Classify.setText("Classify");
        Classify.setActionCommand("");
        Classify.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ClassifyMouseClicked(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Max Epoch");

        maxepoch.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        maxepoch.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel5.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Activation Functions");

        Function.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        Function.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "Linear ", "Sigmoid", "Tanh", "ReLU" }));

        jLabel6.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("SSE : ");

        jLabel7.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 403, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        x1.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        x1.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        x2.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        x2.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel8.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel11.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Test");

        Test.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        Test.setText("Test");
        Test.setActionCommand("");
        Test.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TestMouseClicked(evt);
            }
        });
        Test.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TestActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(Gates, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(Classify, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(3, 3, 3)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Function, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(maxepoch, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(x1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(x2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Test)
                        .addGap(70, 70, 70))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Gates, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jSlider1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)))
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(maxepoch, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Function, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Classify, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(x1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(x2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Test, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ClassifyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ClassifyMouseClicked
       
       if(Gates.getSelectedItem() == "AND Gate") PerceptronFunc();
       else if(Gates.getSelectedItem()== "NAND Gate") PerceptronFunc();
       else if(Gates.getSelectedItem() == "OR Gate") PerceptronFunc();
       else if(Gates.getSelectedItem() == "NOR Gate") PerceptronFunc();
       else if(Gates.getSelectedItem() == "XOR Gate") MultiLayerFunc();
       else if(Gates.getSelectedItem() == "XNOR Gate") MultiLayerFunc();
    }//GEN-LAST:event_ClassifyMouseClicked

    private void GatesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GatesActionPerformed
        if(Gates.getSelectedItem()== "AND Gate"){
            Function.setVisible(false);
            jLabel5.setVisible(false);
            jLabel6.setVisible(false);
            jLabel7.setVisible(false);
            i00.setText("0");
            i10.setText("0");
            i20.setText("1");
            i30.setText("1");
            
            i01.setText("0");
            i11.setText("1");
            i21.setText("0");
            i31.setText("1");
            
            out0.setText("0");
            out1.setText("0");
            out2.setText("0");
            out3.setText("1");
        } 
        if(Gates.getSelectedItem()== "NAND Gate"){
            Function.setVisible(false);
            jLabel5.setVisible(false);
            jLabel6.setVisible(false);
            jLabel7.setVisible(false);
            i00.setText("0");
            i10.setText("0");
            i20.setText("1");
            i30.setText("1");
            
            i01.setText("0");
            i11.setText("1");
            i21.setText("0");
            i31.setText("1");
            
            out0.setText("1");
            out1.setText("1");
            out2.setText("1");
            out3.setText("0");
        } 
        if(Gates.getSelectedItem()== "OR Gate"){
            jLabel6.setVisible(false);
            jLabel7.setVisible(false);
            Function.setVisible(false);
            jLabel5.setVisible(false);
            i00.setText("0");
            i10.setText("0");
            i20.setText("1");
            i30.setText("1");
            
            i01.setText("0");
            i11.setText("1");
            i21.setText("0");
            i31.setText("1");
            
            out0.setText("0");
            out1.setText("1");
            out2.setText("1");
            out3.setText("1");
        } 
        if(Gates.getSelectedItem()== "NOR Gate"){
            jLabel6.setVisible(false);
            jLabel7.setVisible(false);
            Function.setVisible(false);
            jLabel5.setVisible(false);
            i00.setText("0");
            i10.setText("0");
            i20.setText("1");
            i30.setText("1");
            
            i01.setText("0");
            i11.setText("1");
            i21.setText("0");
            i31.setText("1");
            
            out0.setText("1");
            out1.setText("0");
            out2.setText("0");
            out3.setText("0");
        }
        if(Gates.getSelectedItem()== "XOR Gate"){
            jLabel6.setVisible(true);
            jLabel7.setVisible(true);
            Function.setVisible(true);
            jLabel5.setVisible(true);
            i00.setText("0");
            i10.setText("0");
            i20.setText("1");
            i30.setText("1");
            
            i01.setText("0");
            i11.setText("1");
            i21.setText("0");
            i31.setText("1");
            
            out0.setText("0");
            out1.setText("1");
            out2.setText("1");
            out3.setText("0");
        }
        if(Gates.getSelectedItem()== "XNOR Gate"){
            jLabel6.setVisible(true);
            jLabel7.setVisible(true);
            Function.setVisible(true);
            jLabel5.setVisible(true);
            i00.setText("0");
            i10.setText("0");
            i20.setText("1");
            i30.setText("1");
            
            i01.setText("0");
            i11.setText("1");
            i21.setText("0");
            i31.setText("1");
            
            out0.setText("1");
            out1.setText("0");
            out2.setText("0");
            out3.setText("1");
        }
    }//GEN-LAST:event_GatesActionPerformed

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        String value;
        jSlider1.setMaximum(10);
        jSlider1.setMinimum(0);
        value = Float.toString((float) (jSlider1.getValue()/10.0));
        jLabel3.setText(value);
        LearningRateValue = Float.parseFloat(value);
    }//GEN-LAST:event_jSlider1StateChanged

    private void TestMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TestMouseClicked
        if(x1.getText().equals(i00.getText()) && x2.getText().equals(i01.getText())){
            jLabel8.setText(Double.toString(T1));
        }
        else if(x1.getText().equals(i10.getText()) && x2.getText().equals(i11.getText())){
            jLabel8.setText(Double.toString(T2));
        }
        else if(x1.getText().equals(i20.getText()) && x2.getText().equals(i21.getText())){
            jLabel8.setText(Double.toString(T3));
        }
        else if(x1.getText().equals(i30.getText()) && x2.getText().equals(i31.getText())){
            jLabel8.setText(Double.toString(T4));
        }
    }//GEN-LAST:event_TestMouseClicked

    private void TestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TestActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TestActionPerformed

    /**
     * @param args the command line arguments
     */
   
    public static void main(String args[]) {
   
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AI_Project2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AI_Project2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AI_Project2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AI_Project2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AI_Project2().setVisible(true);
                
                
            }
        });
        
        
    }
    
    
    
    double getRandomNumber(double min, double max){
        double n = (double) (Math.random() * (max - min) + min);   return n;
    }
    
    void StepFunc(double x){
        if(x >= 0) Ya = 1;
        else if (x < 0) Ya = 0;
    }
    
    void LinearFunc(double x){
        Y = x;
    }
    
    void SigmoidFunc(double x){
       Y = 1/(1+(exp(-x)));
    }
    
    void TanhFunc(double x){
        Y = (2/(1+(exp(-2*x))))-1;
    }
    
    void ReLUFunc(double x){
        if(x >= 0) Y = x;
        else if (x < 0) Y = 0;
    }
    
    void DLinearFunc(double y){
        DY = 1;
    }
    
    void DSigmoidFunc(double y){
       DY = y*(1-y);
    }
    
    void DTanhFunc(double y){
        DY = 1 - (pow(y,2));
    }
    
    void DReLUFunc(double y){
        if(y >= 0) DY = 1;
        else if (y < 0) DY = 0;
    }
    
    void functions(double x){
        String Func = (String) Function.getSelectedItem();
        if(null != Func) switch (Func) {
            case "Linear" -> LinearFunc(x);
            case "Sigmoid" -> SigmoidFunc(x);
            case "Tanh" -> TanhFunc(x);
            case "ReLU" -> ReLUFunc(x);
            default -> {
            }
        }
    }
    
    void Derivativefunctions(double y){
        String Func = (String) Function.getSelectedItem();
        if(null != Func) switch (Func) {
            case "Linear" -> DLinearFunc(y);
            case "Sigmoid" -> DSigmoidFunc(y);
            case "Tanh" -> DTanhFunc(y);
            case "ReLU" -> DReLUFunc(y);
            default -> {
            }
        }
    }
    
    void MultiLayerFunc(){
       Function.setVisible(true);
       jLabel5.setVisible(true);
       int X1, X2, Yd;
       double BigX3 = 0, DW13 = 0, DW23 = 0, DTH3 = 0;
       W13 = getRandomNumber(-1.2 , 1.2);
       W23 = getRandomNumber(-1.2 , 1.2);
       th3 = getRandomNumber(-1.2 , 1.2);
       
       double BigX4 = 0, DW14 = 0, DW24 = 0, DTH4 = 0;
       W14 = getRandomNumber(-1.2 , 1.2);
       W24 = getRandomNumber(-1.2 , 1.2);
       th4 = getRandomNumber(-1.2 , 1.2);
       
       double BigX5 = 0, DW35 = 0, DW45 = 0, DTH5 = 0;
       double W35 = getRandomNumber(-1.2 , 1.2);
       double W45 = getRandomNumber(-1.2 , 1.2);
       double th5 = getRandomNumber(-1.2 , 1.2);
       
       double error1 = 1, error2 = 1, error3 = 1 ,error4 = 1;
       double SSE = 10;
       
       int maxepochValue;
       maxepochValue = Integer.parseInt(maxepoch.getText());
       for(;(SSE > 0.001) && (maxepochValue > 0); maxepochValue--){
           for(int i=0 ; i<4; i++){
               switch (i) {
                   case 0 -> {
                       X1 = Integer.parseInt(i00.getText());
                       X2 = Integer.parseInt(i01.getText());
                       Yd = Integer.parseInt(out0.getText());
                       BigX3 = ((X1*W13) + (X2*W23) - th3);
                       functions(BigX3);
                       Y3 = Y;
                       BigX4 = ((X1*W14) + (X2*W24) - th4);
                       functions(BigX4);
                       Y4 = Y;
                       BigX5 = ((Y3*W35) + (Y4*W45) - th5);
                       functions(BigX5);
                       Y5 = Y;
                       T1 = Y5;
                   
                       error1 = Yd - Y5;
                       Derivativefunctions(Y5);
                       DY5 = DY*error1;
                       DW35 = LearningRateValue * Y3 * DY5;
                       DW45 = LearningRateValue * Y4 * DY5;
                       DTH5 = LearningRateValue * -1 * DY5;
                       Derivativefunctions(Y3);
                       DY3 = DY*DY5*W35;
                       Derivativefunctions(Y4);
                       DY4 = DY*DY5*W45;
                       DW13 = LearningRateValue * X1 * DY3;
                       DW23 = LearningRateValue * X2 * DY3;
                       DTH3 = LearningRateValue * -1 * DY3;
                       DW14 = LearningRateValue * X1 * DY4;
                       DW24 = LearningRateValue * X2 * DY4;
                       DTH4 = LearningRateValue * -1 * DY4;
                       W13 = W13 + DW13;
                       W14 = W14 + DW14;
                       W23 = W23 + DW23;
                       W24 = W24 + DW24;
                       W35 = W35 + DW35;
                       W45 = W45 + DW45;
                       th3 = th3 + DTH3;
                       th4 = th4 + DTH4;
                       th5 = th5 + DTH5;
                   }
                   case 1 -> {
                       X1 = Integer.parseInt(i10.getText());
                       X2 = Integer.parseInt(i11.getText());
                       Yd = Integer.parseInt(out1.getText());
                       BigX3 = ((X1*W13) + (X2*W23) - th3);
                       functions(BigX3);
                       Y3 = Y;
                       BigX4 = ((X1*W14) + (X2*W24) - th4);
                       functions(BigX4);
                       Y4 = Y;
                       BigX5 = ((Y3*W35) + (Y4*W45) - th5);
                       functions(BigX5);
                       Y5 = Y;
                       error2 = Yd - Y5;
                       T2 = Y5;
                       Derivativefunctions(Y5);
                       DY5 = DY*error2;
                       DW35 = LearningRateValue * Y3 * DY5;
                       DW45 = LearningRateValue * Y4 * DY5;
                       DTH5 = LearningRateValue * -1 * DY5;
                       Derivativefunctions(Y3);
                       DY3 = DY*DY5*W35;
                       Derivativefunctions(Y4);
                       DY4 = DY*DY5*W45;
                       DW13 = LearningRateValue * X1 * DY3;
                       DW23 = LearningRateValue * X2 * DY3;
                       DTH3 = LearningRateValue * -1 * DY3;
                       DW14 = LearningRateValue * X1 * DY4;
                       DW24 = LearningRateValue * X2 * DY4;
                       DTH4 = LearningRateValue * -1 * DY4;
                       W13 = W13 + DW13;
                       W14 = W14 + DW14;
                       W23 = W23 + DW23;
                       W24 = W24 + DW24;
                       W35 = W35 + DW35;
                       W45 = W45 + DW45;
                       th3 = th3 + DTH3;
                       th4 = th4 + DTH4;
                       th5 = th5 + DTH5;
                   }
                   case 2 -> {
                       X1 = Integer.parseInt(i20.getText());
                       X2 = Integer.parseInt(i21.getText());
                       Yd = Integer.parseInt(out2.getText());
                       BigX3 = ((X1*W13) + (X2*W23) - th3);
                       functions(BigX3);
                       Y3 = Y;
                       BigX4 = ((X1*W14) + (X2*W24) - th4);
                       functions(BigX4);
                       Y4 = Y;
                       BigX5 = ((Y3*W35) + (Y4*W45) - th5);
                       functions(BigX5);
                       Y5 = Y;
                       error3 = Yd - Y5;
                       T3 =  Y5;
                       Derivativefunctions(Y5);
                       DY5 = DY*error3;
                       DW35 = LearningRateValue * Y3 * DY5;
                       DW45 = LearningRateValue * Y4 * DY5;
                       DTH5 = LearningRateValue * -1 * DY5;
                       Derivativefunctions(Y3);
                       DY3 = DY*DY5*W35;
                       Derivativefunctions(Y4);
                       DY4 = DY*DY5*W45;
                       DW13 = LearningRateValue * X1 * DY3;
                       DW23 = LearningRateValue * X2 * DY3;
                       DTH3 = LearningRateValue * -1 * DY3;
                       DW14 = LearningRateValue * X1 * DY4;
                       DW24 = LearningRateValue * X2 * DY4;
                       DTH4 = LearningRateValue * -1 * DY4;
                       W13 = W13 + DW13;
                       W14 = W14 + DW14;
                       W23 = W23 + DW23;
                       W24 = W24 + DW24;
                       W35 = W35 + DW35;
                       W45 = W45 + DW45;
                       th3 = th3 + DTH3;
                       th4 = th4 + DTH4;
                       th5 = th5 + DTH5;
                   }
                   case 3 -> {
                       X1 = Integer.parseInt(i30.getText());
                       X2 = Integer.parseInt(i31.getText());
                       Yd = Integer.parseInt(out3.getText());
                       BigX3 = ((X1*W13) + (X2*W23) - th3);
                       functions(BigX3);
                       Y3 = Y;
                       BigX4 = ((X1*W14) + (X2*W24) - th4);
                       functions(BigX4);
                       Y4 = Y;
                       BigX5 = ((Y3*W35) + (Y4*W45) - th5);
                       functions(BigX5);
                       Y5 = Y;
                       error4 = Yd - Y5;
                       T4 = Y5;
                       Derivativefunctions(Y5);
                       DY5 = DY*error4;
                       DW35 = LearningRateValue * Y3 * DY5;
                       DW45 = LearningRateValue * Y4 * DY5;
                       DTH5 = LearningRateValue * -1 * DY5;
                       Derivativefunctions(Y3);
                       DY3 = DY*DY5*W35;
                       Derivativefunctions(Y4);
                       DY4 = DY*DY5*W45;
                       DW13 = LearningRateValue * X1 * DY3;
                       DW23 = LearningRateValue * X2 * DY3;
                       DTH3 = LearningRateValue * -1 * DY3;
                       DW14 = LearningRateValue * X1 * DY4;
                       DW24 = LearningRateValue * X2 * DY4;
                       DTH4 = LearningRateValue * -1 * DY4;
                       W13 = W13 + DW13;
                       W14 = W14 + DW14;
                       W23 = W23 + DW23;
                       W24 = W24 + DW24;
                       W35 = W35 + DW35;
                       W45 = W45 + DW45;
                       th3 = th3 + DTH3;
                       th4 = th4 + DTH4;
                       th5 = th5 + DTH5;
                   }
                   default -> {
                   }
               }
           }
           SSE = pow(error1,2) + pow(error2,2)+ pow(error3,2) + pow(error4,2);
           System.out.print(SSE);
           System.out.print("\t");
           System.out.print(maxepochValue);
           System.out.print("\n");
//           drawOutputForMulti();
       }
       DrawLinesForMulti();
       String SSET; 
       SSET = Double.toString(SSE);
       jLabel7.setText(SSET);
       
    }
    
    void PerceptronFunc(){ 
       int X1, X2, Yd = 0;
       double BigX, DW1, DW2 = 0;
       W1 = getRandomNumber(-0.5 , 0.5);
       W2 = getRandomNumber(-0.5 , 0.5);
       th = getRandomNumber(-0.5 , 0.5);
       
       

       int maxepochValue;
       maxepochValue = Integer.parseInt(maxepoch.getText());       
       double error1 = 1, error2 = 1, error3 = 1, error4 = 1;
       for(;((error1 != 0) && (error2 != 0) && (error3 != 0) && (error4 != 0)) && (maxepochValue > 0); maxepochValue--){
           for(int i=0; i<4; i++){
               switch (i) {
                   case 0 -> {
                       X1 = Integer.parseInt(i00.getText());
                       X2 = Integer.parseInt(i01.getText());
                       Yd = Integer.parseInt(out0.getText());
                       BigX = ((X1*W1) + (X2*W2) - th);
                       StepFunc(BigX);
//                       System.out.print(W1);
//                       System.out.print("\t");
//                       System.out.print(W2);
//                       System.out.print("\t");
//                       System.out.print(Ya);
//                       System.out.print("\t");
//                       System.out.print(error1);
//                       System.out.print("\n");
                       int Yy = Ya;
                       error1 = Yd - Yy;
                       T1 = Yy;
                       DW1 = LearningRateValue * X1 * error1;
                       DW2 = LearningRateValue * X2 * error1;
                       W1 = W1 + DW1;
                       W2 = W2 + DW2;
                   }
                   case 1 -> {
                       X1 = Integer.parseInt(i10.getText());
                       X2 = Integer.parseInt(i11.getText());
                       Yd = Integer.parseInt(out1.getText());
                       BigX = ((X1*W1) + (X2*W2) - th);
                       StepFunc(BigX);
//                       System.out.print(W1);
//                       System.out.print("\t");
//                       System.out.print(W2);
//                       System.out.print("\t");
//                       System.out.print(Ya);
//                       System.out.print("\t");
//                       System.out.print(error2);
//                       System.out.print("\n");
                       int Yy = Ya;
                       error2 = Yd - Yy;
                       T2 = Yy;
                       DW1 = LearningRateValue * X1 * error2;
                       DW2 = LearningRateValue * X2 * error2;
                       W1 = W1 + DW1;
                       W2 = W2 + DW2;
                   }
                   case 2 -> {
                       X1 = Integer.parseInt(i20.getText());
                       X2 = Integer.parseInt(i21.getText());
                       Yd = Integer.parseInt(out2.getText());
                       BigX = ((X1*W1) + (X2*W2) - th);
                       StepFunc(BigX);
//                       System.out.print(W1);
//                       System.out.print("\t");
//                       System.out.print(W2);
//                       System.out.print("\t");
//                       System.out.print(Ya);
//                       System.out.print("\t");
//                       System.out.print(error3);
//                       System.out.print("\n");
                       int Yy = Ya;
                       error3 = Yd - Yy;
                       T3 = Yy;
                       DW1 = LearningRateValue * X1 * error3;
                       DW2 = LearningRateValue * X2 * error3;
                       W1 = W1 + DW1;
                       W2 = W2 + DW2;
                   }
                   case 3 -> {
                       X1 = Integer.parseInt(i30.getText());
                       X2 = Integer.parseInt(i31.getText());
                       Yd = Integer.parseInt(out3.getText());
                       BigX = ((X1*W1) + (X2*W2) - th);
                       StepFunc(BigX);
//                       System.out.print(W1);
//                       System.out.print("\t");
//                       System.out.print(W2);
//                       System.out.print("\t");
//                       System.out.print(Ya);
//                       System.out.print("\t");
//                       System.out.print(error4);
//                       System.out.print("\n");
                       int Yy = Ya;
                       error4 = Yd - Yy;
                       T4 = Yy;
                       DW1 = LearningRateValue * X1 * error4;
                       DW2 = LearningRateValue * X2 * error4;
                       W1 = W1 + DW1;
                       W2 = W2 + DW2;
                   }
                   default -> {
                   }
               }
           }
           
           System.out.print(maxepochValue);
           System.out.print("\n");
           
       }
       DrawLineForPer();
    }
    
    private Graphics2D DrawPoints() {

        Graphics Graph = jPanel3.getGraphics();
        Graphics2D Graph2 = (Graphics2D) Graph;
        Graph2.setColor(Color.white);
        Graph2.fillRect(0, 0, jPanel3.getWidth(), jPanel3.getHeight());
        Graph2.setColor(Color.black);
        Graph2.drawLine(jPanel3.getWidth()/2, 0, jPanel3.getWidth()/2, jPanel3.getHeight());
        Graph2.drawLine(0, jPanel3.getHeight()/2, jPanel3.getWidth(), jPanel3.getHeight()/2);
        Graph2.drawRect(0, 0, jPanel3.getWidth(), jPanel3.getHeight());
        Graph2.setColor(Color.DARK_GRAY);
        return Graph2;
    }
    
    
    private void DrawLineForPer() {
        Graphics2D Graph = DrawPoints();
        if(Gates.getSelectedItem() == "AND Gate") {
            Graph.drawRect(jPanel3.getWidth()/2, jPanel3.getHeight()/2, 10, 10);
            Graph.drawRect((jPanel3.getWidth()/2)+100, jPanel3.getHeight()/2, 10, 10);
            Graph.drawRect(jPanel3.getWidth()/2, (jPanel3.getHeight()/2)-100, 10, 10);
            Graph.fillRect((jPanel3.getWidth()/2)+100,(jPanel3.getHeight()/2)-100, 10, 10);
        }
        else if(Gates.getSelectedItem() == "NAND Gate") {
            Graph.fillRect(jPanel3.getWidth()/2, jPanel3.getHeight()/2, 10, 10);
            Graph.fillRect((jPanel3.getWidth()/2)+100, jPanel3.getHeight()/2, 10, 10);
            Graph.fillRect(jPanel3.getWidth()/2, (jPanel3.getHeight()/2)-100, 10, 10);
            Graph.drawRect((jPanel3.getWidth()/2)+100,(jPanel3.getHeight()/2)-100, 10, 10);
        }
            
        else if(Gates.getSelectedItem() == "OR Gate") {
            Graph.drawRect(jPanel3.getWidth()/2, jPanel3.getHeight()/2, 10, 10);
            Graph.fillRect((jPanel3.getWidth()/2)+100, jPanel3.getHeight()/2, 10, 10);
            Graph.fillRect(jPanel3.getWidth()/2, (jPanel3.getHeight()/2)-100, 10, 10);
            Graph.fillRect((jPanel3.getWidth()/2)+100,(jPanel3.getHeight()/2)-100, 10, 10);
        }
                
        else if(Gates.getSelectedItem() == "NOR Gate") {
            Graph.fillRect(jPanel3.getWidth()/2, jPanel3.getHeight()/2, 10, 10);
            Graph.drawRect((jPanel3.getWidth()/2)+100, jPanel3.getHeight()/2, 10, 10);
            Graph.drawRect(jPanel3.getWidth()/2, (jPanel3.getHeight()/2)-100, 10, 10);
            Graph.drawRect((jPanel3.getWidth()/2)+100,(jPanel3.getHeight()/2)-100, 10, 10);
        }
        
        if(W2 != 0){
            double Slope = -1*(jPanel3.getWidth()*1.5)/100;
            
            int Y1= 0;
            int Y2 = jPanel3.getWidth();
            
            double X1 = ((th/W2)-(W1*Slope)/W2)*100;
            
            Slope =(jPanel3.getWidth()/1.5)/100;
            
            double X2 = ((th/W1)-(W2*Slope/W1))*100;
            
            Graph.setColor(Color.CYAN);
            Graph.setStroke(new BasicStroke(2));
            Graph.drawLine(Y1, (int)((jPanel3.getHeight()/2)-X1), Y2, (int)((jPanel3.getHeight()/2)-X2));
        }
    }
    
    private void DrawLinesForMulti() {
        Graphics2D Graph = DrawPoints();
        
        if(Gates.getSelectedItem() == "XOR Gate") {
            Graph.drawRect(jPanel3.getWidth()/2, jPanel3.getHeight()/2, 10, 10);
            Graph.fillRect((jPanel3.getWidth()/2)+100, jPanel3.getHeight()/2, 10, 10);
            Graph.fillRect(jPanel3.getWidth()/2, (jPanel3.getHeight()/2)-100, 10, 10);
            Graph.drawRect((jPanel3.getWidth()/2)+100,(jPanel3.getHeight()/2)-100, 10, 10);
        }
        else if(Gates.getSelectedItem() == "XNOR Gate") {
            Graph.fillRect(jPanel3.getWidth()/2, jPanel3.getHeight()/2, 10, 10);
            Graph.drawRect((jPanel3.getWidth()/2)+100, jPanel3.getHeight()/2, 10, 10);
            Graph.drawRect(jPanel3.getWidth()/2, (jPanel3.getHeight()/2)-100, 10, 10);
            Graph.fillRect((jPanel3.getWidth()/2)+100,(jPanel3.getHeight()/2)-100, 10, 10);
        }
        if(W23 != 0){
            double Slope = -1*(jPanel3.getWidth()*1.6)/100;
            
            int Y1= 0;
            int Y2 = jPanel3.getWidth();
            
            double X1 = ((th3/W23)-(W13*Slope)/W23)*100;
            
            Slope =(jPanel3.getWidth()/1.6)/100;
            
            double X2 = ((th3/W13)-(W23*Slope/W13))*100;
            
            Graph.setColor(Color.blue);
            Graph.setStroke(new BasicStroke(2));
            Graph.drawLine(Y1, (int)((jPanel3.getHeight()/2)-X1), Y2, (int)((jPanel3.getHeight()/2)-X2));
        }
        if(W24 != 0){
            double Slope = -1*(jPanel3.getWidth()*0.9)/100;
            
            int Y1= 0;
            int Y2 = jPanel3.getWidth();
            
            double X1 = ((th4/W24)-(W14*Slope)/W24)*100;
            
            Slope =(jPanel3.getWidth()/0.9)/100;
            
            double X2 = ((th4/W14)-(W24*Slope/W14))*100;
            
            Graph.setColor(Color.YELLOW);
            Graph.setStroke(new BasicStroke(2));
            Graph.drawLine(Y1, (int)((jPanel3.getHeight()/2)-X1), Y2, (int)((jPanel3.getHeight()/2)-X2));
        }
    }

    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Classify;
    private javax.swing.JComboBox<String> Function;
    private javax.swing.JComboBox<String> Gates;
    private javax.swing.JLabel L1;
    private javax.swing.JLabel L2;
    private javax.swing.JButton Test;
    private javax.swing.JTextField i00;
    private javax.swing.JTextField i01;
    private javax.swing.JTextField i10;
    private javax.swing.JTextField i11;
    private javax.swing.JTextField i20;
    private javax.swing.JTextField i21;
    private javax.swing.JTextField i30;
    private javax.swing.JTextField i31;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTextField maxepoch;
    private javax.swing.JTextField out0;
    private javax.swing.JTextField out1;
    private javax.swing.JTextField out2;
    private javax.swing.JTextField out3;
    private javax.swing.JTextField x1;
    private javax.swing.JTextField x2;
    // End of variables declaration//GEN-END:variables
}
